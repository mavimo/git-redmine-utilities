#!/usr/bin/env python
import re
import os
import sys
import getopt
import subprocess
from subprocess import Popen, PIPE

import ConfigParser
from redmine import Redmine

def config():
    config = ConfigParser.ConfigParser()
    config.read(['.redmine.cfg', os.path.expanduser('~/.redmine.cfg')])
    return {
        'redmine' : {
            'hostname': config.get('Redmine', 'hostname'),
            'username': config.get('Redmine', 'username'),
            'password': config.get('Redmine', 'password')
        },
        'pattern': {
            'branch': config.get('Pattern', 'branch', 1),
            'message': config.get('Pattern', 'message', 1),
        }
    }

def curr_branch():
    p = Popen(['git', 'branch'], stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate()

    for row in output.split("\n"):
        if row[0:1] == '*':
            return row.split(' ')[1]

def get_issue_number(branch):
    params = branch.replace('feature/', '')
    params = branch.split('_')
    issue_id = params[1]
    return int(issue_id)

def get_commit_message(issue_id):
    # Get configuration
    cfg = config()

    # Connect to redmine
    redmine = Redmine(cfg['redmine']['hostname'], username=cfg['redmine']['username'], password=cfg['redmine']['password'])

    # Message template
    msg = cfg['pattern']['message']

    try:
        # Get issue information
        issue = redmine.issue.get(issue_id)

        # Extract items from issue info
        subject_items = issue.subject.split('-', 2)
        story_prefix = subject_items[0].strip()
        story_code = subject_items[1].strip()
        story_name = subject_items[2].strip()

        # Replace patterns in message
        msg = msg.replace('%(story_prefix)', story_prefix)
        msg = msg.replace('%(story_code)', story_code)
        msg = msg.replace('%(issue_id)', str(issue_id))
        msg = msg.replace('%(story_name)', story_name)

    except Exception, e:
        print "Error occured, are you sure your config, or branch name is correct?"
        sys.exit(4)

    return msg

def main():
    # Get default file content
    f = open(sys.argv[1], 'r')
    msg = f.read()
    f.close()

    if (msg.startswith('Merge branch')):
        return 0

    # Get current branch
    branch = curr_branch()

    # Get current issue
    issue_id = get_issue_number(branch)

    # Get commit message
    commit_msg = get_commit_message(issue_id)

    # Rewrite file prepending the message
    f = open(sys.argv[1], 'w')
    f.write(commit_msg)
    f.write(msg)
    f.close()

if __name__ == "__main__":
    main()
